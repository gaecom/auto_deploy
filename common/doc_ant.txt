学习struts+spring+hibernate,尤其是Appfuse的过程中大量涉及到ant的使用，因此我觉得有必要对ant做个比较深入的学习，以下是在学习过程中搜集的材料。比较详细，很适合没有接触过ant的初学者。
Ant基本使用指南

1 Ant是什么？
Apache Ant 是一个基于 Java的生成工具。
生成工具在软件开发中用来将源代码和其他输入文件转换为可执行文件的形式（也有可能转换为可安装的产品映像形式）。随着应用程序的生成过程变得更加复杂，确保在每次生成期间都使用精确相同的生成步骤，同时实现尽可能多的自动化，以便及时产生一致的生成版本
2下载、安装Ant
安装Ant
下载.zip文件，解压缩到c:\ant1.3(后面引用为%ANT_HOME%)
 
2.1在你运行Ant之前需要做一些配置工作。
·将bin目录加入PATH环境变量。
·设定ANT_HOME环境变量，指向你安装Ant的目录。在一些OS上，Ant的脚本可以猜测ANT_HOME（Unix和Windos NT/2000）－但最好不要依赖这一特性。
·可选地，设定JAVA_HOME环境变量（参考下面的高级小节），该变量应该指向你安装JDK的目录。
注意：不要将Ant的ant.jar文件放到JDK/JRE的lib/ext目录下。Ant是个应用程序，而lib/ext目录是为JDK扩展使用的（如JCE，JSSE扩展）。而且通过扩展装入的类会有安全方面的限制。
2.2运行Ant
运行Ant非常简单，当你正确地安装Ant后，只要输入ant就可以了。
 
没有指定任何参数时，Ant会在当前目录下查询build.xml文件。如果找到了就用该文件作为buildfile。如果你用 -find 选项。Ant就会在上级目录中寻找buildfile，直至到达文件系统的根。要想让Ant使用其他的buildfile，可以用参数 -buildfile file，这里file指定了你想使用的buildfile。
 
可以指定执行一个或多个target。当省略target时，Ant使用标签<project>的default属性所指定的target。
 
 
命令行选项总结：
ant [options] [target [target2 [target3] ...]]
Options:
-help print this message
-projecthelp print project help information
-version print the version information and exit
-quiet be extra quiet
-verbose be extra verbose
-debug print debugging information
-emacs produce logging information without adornments
-logfile file use given file for log output
-logger classname the class that is to perform logging
-listener classname add an instance of class as a project listener
-buildfile file use specified buildfile
-find file search for buildfile towards the root of the filesystem and use the first one found
-Dproperty=value set property to value
Ant 命令行参考 
从命令行调用Ant 的语法如下所示：
ant [option [option...]] [target [target...]]
option := {-help
|-projecthelp
|-version
|-quiet
|-verbose
|-debug
|-emacs
|-logfile filename
|-logger classname
|-listener classname
|-buildfile filename
|-Dproperty=value
|-find filename}
语法元素说明如下：
-help
显示描述Ant 命令及其选项的帮助信息。
-projecthelp
显示包含在构建文件中的、所有用户编写的帮助文档。即为各个<target>
中description 属性的文本，以及包含在<description>元素中的任何文
本。将有description 属性的目标列为主目标（“Main target”），没有此属
性的目标则列为子目标（“Subtarget”）。
-version
要求Ant 显示其版本信息，然后退出。
-quiet
抑制并非由构建文件中的echo 任务所产生的大多数消息。
-verbose
显示构建过程中每个操作的详细消息。此选项与-debug 选项只能选其一。
-debug
显示Ant 和任务开发人员已经标志为调试消息的消息。此选项与-verbose 只
能选其一。
-emacs
对日志消息进行格式化，使它们能够很容易地由Emacs 的shell 模式（shellmode）
所解析；也就是说，打印任务事件，但并不缩排，在其之前也没有
[taskname]。
-logfile filename
将日志输出重定向到指定文件。
-logger classname
指定一个类来处理Ant 的日志记录。所指定的类必须实现了org.apache.
tools.ant.BuildLogger 接口。
-listener classname
为Ant 声明一个监听类，并增加到其监听者列表中。在Ant与IDE或其他Java
程序集成时，此选项非常有用。可以阅读第六章以了解有关监听者的更多信
息。必须将所指定的监听类编写为可以处理Ant 的构建消息接发。
-buildfile filename
指定Ant 需要处理的构建文件。默认的构建文件为build.xml。
-Dproperty=value
在命令行上定义一个特性名－值对。
-find filename
指定Ant 应当处理的构建文件。与-buildfile 选项不同，如果所指定文件在当
前目录中未找到，-find 就要求Ant 在其父目录中再进行搜索。这种搜索会继
续在其祖先目录中进行，直至达到文件系统的根为止，在此如果文件还未找
到，则构建失败。
构建文件轮廓
下面是一个通用的构建文件，它很适合作为一个模板。构建文件包括<project>
元素，以及其中嵌套的<target>、<property> 和<path> 元素。
<project default="all">
<property name="a.property" value="a value"/>
<property name="b.property" value="b value"/>
<path id="a.path">
<pathelement location="${java.home}/jre/lib/rt.jar"/>
</path>
<target name="all">
<javac srcdir=".">
<classpath refid="a.path"/>
</javac>
</target>
</project>
关于构建文件有几点需要记住：
● 所有构建文件都要有<project>元素，而且至少有一个<target> 元素。
● 对于<project> 元素的default 属性并没有默认值。
● 构建文件并不一定要被命名为build.xml。不过build.xml 是Ant 要搜索的默
认文件名。
● 每个构建文件只能有一个<project> 元素。
 
 
例子
ant
使用当前目录下的build.xml运行Ant，执行缺省的target。
ant -buildfile test.xml
使用当前目录下的test.xml运行Ant，执行缺省的target。
ant -buildfile test.xml dist
使用当前目录下的test.xml运行Ant，执行一个叫做dist的target。
ant -buildfile test.xml -Dbuild=build/classes dist
使用当前目录下的test.xml运行Ant，执行一个叫做dist的target，并设定build属性的值为build/classes。
 
3编写build.xml
Ant的buildfile是用XML写的。每个buildfile含有一个project。
 
buildfile中每个task元素可以有一个id属性，可以用这个id值引用指定的任务。这个值必须是唯一的。（详情请参考下面的Task小节）
 
3.1Projects
 
project有下面的属性：
AttributeDescriptionRequired
name项目名称.No
default当没有指定target时使用的缺省targetYes
basedir用于计算所有其他路径的基路径。该属性可以被basedir property覆盖。当覆盖时，该属性被忽略。如果属性和basedir property都没有设定，就使用buildfile文件的父目录。No
项目的描述以一个顶级的<description>元素的形式出现（参看description小节）。
 
一个项目可以定义一个或多个target。一个target是一系列你想要执行的。执行Ant时，你可以选择执行那个target。当没有给定target时，使用project的default属性所确定的target。
 
3.2Targets
 
一个target可以依赖于其他的target。例如，你可能会有一个target用于编译程序，一个target用于生成可执行文件。你在生成可执行文件之前必须先编译通过，所以生成可执行文件的target依赖于编译target。Ant会处理这种依赖关系。
 
然而，应当注意到，Ant的depends属性只指定了target应该被执行的顺序－如果被依赖的target无法运行，这种depends对于指定了依赖关系的target就没有影响。
 
Ant会依照depends属性中target出现的顺序（从左到右）依次执行每个target。然而，要记住的是只要某个target依赖于一个target，后者就会被先执行。
<target name="A"/>
<target name="B" depends="A"/>
<target name="C" depends="B"/>
<target name="D" depends="C,B,A"/>
假定我们要执行target D。从它的依赖属性来看，你可能认为先执行C，然后B，最后A被执行。错了，C依赖于B，B依赖于A，所以先执行A，然后B，然后C，最后D被执行。
 
一个target只能被执行一次，即时有多个target依赖于它（看上面的例子）。
 
如果（或如果不）某些属性被设定，才执行某个target。这样，允许根据系统的状态（java version, OS, 命令行属性定义等等）来更好地控制build的过程。要想让一个target这样做，你就应该在target元素中，加入if（或unless）属性，带上target因该有所判断的属性。例如：
<target name="build-module-A" if="module-A-present"/>
<target name="build-own-fake-module-A" unless="module-A-present"/>
如果没有if或unless属性，target总会被执行。
 
可选的description属性可用来提供关于target的一行描述，这些描述可由-projecthelp命令行选项输出。
 
将你的tstamp task在一个所谓的初始化target是很好的做法，其他的target依赖这个初始化target。要确保初始化target是出现在其他target依赖表中的第一个target。在本手册中大多数的初始化target的名字是"init"。
 
target有下面的属性：
AttributeDescriptionRequired
nametarget的名字Yes
depends用逗号分隔的target的名字列表，也就是依赖表。No
if执行target所需要设定的属性名。No
unless执行target需要清除设定的属性名。No
description关于target功能的简短描述。No
 
3.3Tasks
 
一个task是一段可执行的代码。
 
一个task可以有多个属性（如果你愿意的话，可以将其称之为变量）。属性只可能包含对property的引用。这些引用会在task执行前被解析。
 
下面是Task的一般构造形式：
<name attribute1="value1" attribute2="value2" ... />
这里name是task的名字，attributeN是属性名，valueN是属性值。
 
有一套内置的（built-in）task，以及一些可选task，但你也可以编写自己的task。
 
所有的task都有一个task名字属性。Ant用属性值来产生日志信息。
 
可以给task赋一个id属性：
<taskname id="taskID" ... />
这里taskname是task的名字，而taskID是这个task的唯一标识符。通过这个标识符，你可以在脚本中引用相应的task。例如，在脚本中你可以这样：
<script ... >
task1.setFoo("bar");
</script>
设定某个task实例的foo属性。在另一个task中（用java编写），你可以利用下面的语句存取相应的实例。
project.getReference("task1").
注意1：如果task1还没有运行，就不会被生效（例如：不设定属性），如果你在随后配置它，你所作的一切都会被覆盖。
 
注意2：未来的Ant版本可能不会兼容这里所提的属性，因为很有可能根本没有task实例，只有proxies。
 
3.4Properties
 
一个project可以有很多的properties。可以在buildfile中用property task来设定，或在Ant之外设定。一个property有一个名字和一个值。property可用于task的属性值。这是通过将属性名放在"{"和"}"之间并放在属性值的位置来实现的。例如如果有一个property builddir的值是"build"，这个property就可用于属性值：{builddir}/classes。这个值就可被解析为build/classes。
内置属性
 
如果你使用了<property> task 定义了所有的系统属性，Ant允许你使用这些属性。例如，{os.name}对应操作系统的名字。
 
要想得到系统属性的列表可参考the Javadoc of System.getProperties。
 
除了Java的系统属性，Ant还定义了一些自己的内置属性：
basedir project基目录的绝对路径 (与<project>的basedir属性一样)。
ant.file buildfile的绝对路径。
ant.version Ant的版本。
ant.project.name 当前执行的project的名字；由<project>的name属性设定.
ant.java.version Ant检测到的JVM的版本；目前的值有"1.1", "1.2", "1.3" and "1.4".
例子
<project name="MyProject" default="dist" basedir=".">
 
<!-- set global properties for this build -->
<property name="src" value="."/>
<property name="build" value="build"/>
<property name="dist" value="dist"/>
<target name="init">
<!-- Create the time stamp -->
<tstamp/>
<!-- Create the build directory structure used by compile -->
<mkdir dir="{build}"/>
</target>
<target name="compile" depends="init">
<!-- Compile the java code from {src} into {build} -->
<javac srcdir="{src}" destdir="{build}"/>
</target>
<target name="dist" depends="compile">
<!-- Create the distribution directory -->
<mkdir dir="{dist}/lib"/>
<!-- Put everything in {build} into the MyProject-{DSTAMP}.jar file -->
<jar jarfile="{dist}/lib/MyProject-{DSTAMP}.jar" basedir="{build}"/>
</target>
<target name="clean">
<!-- Delete the {build} and {dist} directory trees -->
<delete dir="{build}"/>
<delete dir="{dist}"/>
</target>
</project>
 
3.5Path-like Structures
你可以用":"和";"作为分隔符，指定类似PATH和CLASSPATH的引用。Ant会把分隔符转换为当前系统所用的分隔符。
 
当需要指定类似路径的值时，可以使用嵌套元素。一般的形式是
<classpath>
<pathelement path="{classpath}"/>
<pathelement location="lib/helper.jar"/>
</classpath>
location属性指定了相对于project基目录的一个文件和目录，而path属性接受逗号或分号分隔的一个位置列表。path属性一般用作预定义的路径－－其他情况下，应该用多个location属性。
 
为简洁起见，classpath标签支持自己的path和location属性。所以：
<classpath>
<pathelement path="{classpath}"/>
</classpath>
可以被简写作：
<classpath path="{classpath}"/>
也可通过<fileset>元素指定路径。构成一个fileset的多个文件加入path-like structure的顺序是未定的。
<classpath>
<pathelement path="{classpath}"/>
<fileset dir="lib">
<include name="**/*.jar"/>
</fileset>
<pathelement location="classes"/>
</classpath>
上面的例子构造了一个路径值包括：{classpath}的路径，跟着lib目录下的所有jar文件，接着是classes目录。
 
如果你想在多个task中使用相同的path-like structure，你可以用<path>元素定义他们（与target同级），然后通过id属性引用－－参考Referencs例子。
 
path-like structure可能包括对另一个path-like structurede的引用（通过嵌套<path>元素）：
<path id="base.path">
<pathelement path="{classpath}"/>
<fileset dir="lib">
<include name="**/*.jar"/>
</fileset>
<pathelement location="classes"/>
</path>
<path id="tests.path">
<path refid="base.path"/>
<pathelement location="testclasses"/>
</path>
前面所提的关于<classpath>的简洁写法对于<path>也是有效的，如：
<path id="tests.path">
<path refid="base.path"/>
<pathelement location="testclasses"/>
</path>
可写成：
<path id="base.path" path="{classpath}"/>
命令行变量
 
有些task可接受参数，并将其传递给另一个进程。为了能在变量中包含空格字符，可使用嵌套的arg元素。
AttributeDescriptionRequired
value一个命令行变量；可包含空格字符。只能用一个
line空格分隔的命令行变量列表。
file作为命令行变量的文件名；会被文件的绝对名替代。
path一个作为单个命令行变量的path-like的字符串；或作为分隔符，Ant会将其转变为特定平台的分隔符。
 
例子
<arg value="-l -a"/>
是一个含有空格的单个的命令行变量。
<arg line="-l -a"/>
是两个空格分隔的命令行变量。
<arg path="/dir;/dir2:\dir3"/>
是一个命令行变量，其值在DOS系统上为\dir;\dir2;\dir3；在Unix系统上为/dir:/dir2:/dir3 。
 
References
 
buildfile元素的id属性可用来引用这些元素。如果你需要一遍遍的复制相同的XML代码块，这一属性就很有用－－如多次使用<classpath>结构。
 
下面的例子：
<project ... >
<target ... >
<rmic ...>
<classpath>
<pathelement location="lib/"/>
<pathelement path="{java.class.path}/"/>
<pathelement path="{additional.path}"/>
</classpath>
</rmic>
</target>
<target ... >
<javac ...>
<classpath>
<pathelement location="lib/"/>
<pathelement path="{java.class.path}/"/>
<pathelement path="{additional.path}"/>
</classpath>
</javac>
</target>
</project>
可以写成如下形式：
<project ... >
<path id="project.class.path">
<pathelement location="lib/"/>
<pathelement path="{java.class.path}/"/>
<pathelement path="{additional.path}"/>
</path>
<target ... >
<rmic ...>
<classpath refid="project.class.path"/>
</rmic>
</target>
<target ... >
<javac ...>
<classpath refid="project.class.path"/>
</javac>
</target>
</project>
### pipe or store output to a property
    <redirector outputproperty="bundle_id"> 
          </redirector>
所有使用PatternSets, FileSets 或 path-like structures嵌套元素的task也接受这种类型的引用。
4Ant的Core Tasks
4.1File（Directory）类
4.1.1Mkdir
创建一个目录，如果他的父目录不存在，也会被同时创建。
例子：
<mkdir dir="build/classes"/>
说明：如果build不存在，也会被同时创建
4.1.2Copy
拷贝一个（组）文件、目录
例子：
1.拷贝单个的文件：
<copy file="myfile.txt" tofile="mycopy.txt"/>
2.拷贝单个的文件到指定目录下
<copy file="myfile.txt" todir="../some/other/dir"/>
3.拷贝一个目录到另外一个目录下
<copy todir="../new/dir">
<fileset dir="src_dir"/>
</copy>
4.拷贝一批文件到指定目录下
<copy todir="../dest/dir">
<fileset dir="src_dir">
<include name="**/*.java"/>
<iexclude name="**/Test.java"/>
</fileset>
</copy>
 
<copy todir="../dest/dir">
<fileset dir="src_dir" excludes="**/*.java"/>
</copy>
5.拷贝一批文件到指定目录下，将文件名后增加。Bak后缀
<copy todir="../backup/dir">
<fileset dir="src_dir"/>
<mapper type="glob" from="*" to="*.bak"/>
</copy>
6.拷贝一组文件到指定目录下，替换其中的@标签@内容
<copy todir="../backup/dir">
<fileset dir="src_dir"/>
<filterset>
<filter token="TITLE" value="Foo Bar"/>
</filterset>
</copy>
4.1.3Delete
删除一个（组）文件或者目录
例子
1.删除一个文件
<delete file="/lib/ant.jar"/>
2.删除指定目录及其子目录
<delete dir="lib"/>
3.删除指定的一组文件
<delete>
<fileset dir="." includes="**/*.bak"/>
</delete>
4.删除指定目录及其子目录，包括他自己
<delete includeEmptyDirs="true">
<fileset dir="build"/>
</delete>
4.1.4Move
移动或重命名一个（组）文件、目录
例子：
1.移动或重命名一个文件
<move file="file.orig" tofile="file.moved"/>
2.移动或重命名一个文件到另一个文件夹下面
<move file="file.orig" todir="dir/to/move/to"/>
3.将一个目录移到另外一个目录下
<move todir="new/dir/to/move/to">
<fileset dir="src/dir"/>
</move>
4.将一组文件移动到另外的目录下
<move todir="some/new/dir">
<fileset dir="my/src/dir">
<include name="**/*.jar"/>
<exclude name="**/ant.jar"/>
</fileset>
</move>
5.移动文件过程中增加。Bak后缀
<move todir="my/src/dir">
<fileset dir="my/src/dir">
<exclude name="**/*.bak"/>
</fileset>
<mapper type="glob" from="*" to="*.bak"/>
</move>
 
4.2Java相关
4.2.1Javac
编译java原代码
例子
1.<javac srcdir="{src}"
destdir="{build}"
classpath="xyz.jar"
debug="on"
/>
编译{src}目录及其子目录下的所有。Java文件，。Class文件将放在｛build｝指定的目录下，classpath表示需要用到的类文件或者目录，debug设置为on表示输出debug信息
2.<javac srcdir="{src}:{src2}"
destdir="{build}"
includes="mypackage/p1/**,mypackage/p2/**"
excludes="mypackage/p1/testpackage/**"
classpath="xyz.jar"
debug="on"
/>
编译{src}和{src2}目录及其子目录下的所有。Java文件，但是package/p1/**,mypackage/p2/**将被编译，而mypackage/p1/testpackage/**将不会被编译。Class文件将放在｛build｝指定的目录下，classpath表示需要用到的类文件或者目录，debug设置为on表示输出debug信息
3.<property name="classpath" value=".;./xml-apis.jar;../lib/xbean.jar;./easypo.jar"/>
 
<javac srcdir="{src}"
destdir="{src}"
classpath="{classpath}"
debug="on"
/>
路径是在property中定义的
4.2.2java
执行指定的java类
例子：
1.<java classname="test.Main">
<classpath>
<pathelement location="dist/test.jar"/>
<pathelement path="{java.class.path}"/>
</classpath>
</java>
classname中指定要执行的类，classpath设定要使用的环境变量
2.<path id="project.class.path">
<pathelement location="lib/"/>
<pathelement path="{java.class.path}/"/>
<pathelement path="{additional.path}"/>
</path>
 
<target ... >
<rmic ...>
<classpath refid="project.class.path"/>
</rmic>
</target>
 
4.3打包相关
4.3.1jar
将一组文件打包
例子：
1.<jar destfile="{dist}/lib/app.jar" basedir="{build}/classes"/>
将{build}/classes下面的所有文件打包到{dist}/lib/app.jar中
2.<jar destfile="{dist}/lib/app.jar"
basedir="{build}/classes"
includes="mypackage/test/**"
excludes="**/Test.class"
/>
将{build}/classes下面的所有文件打包到{dist}/lib/app.jar中，但是包括mypackage/test／所有文件不包括所有的Test.class
3.<jar destfile="{dist}/lib/app.jar"
basedir="{build}/classes"
includes="mypackage/test/**"
excludes="**/Test.class"
manifest="my.mf"
/>
manifest属性指定自己的META-INF/MANIFEST.MF文件，而不是由系统生成
4.3.2war
对Jar的扩展，用于打包Web应用
例子：
假设我们的文件目录如下：
thirdparty/libs/jdbc1.jar
thirdparty/libs/jdbc2.jar
build/main/com/myco/myapp/Servlet.class
src/metadata/myapp.xml
src/html/myapp/index.html
src/jsp/myapp/front.jsp
src/graphics/images/gifs/small/logo.gif
src/graphics/images/gifs/large/logo.gif
下面是我们的任务的内容：
<war destfile="myapp.war" webxml="src/metadata/myapp.xml">
<fileset dir="src/html/myapp"/>
<fileset dir="src/jsp/myapp"/>
<lib dir="thirdparty/libs">
<exclude name="jdbc1.jar"/>
</lib>
<classes dir="build/main"/>
<zipfileset dir="src/graphics/images/gifs"
prefix="images"/>
</war>
完成后的结果：
WEB-INF/web.xml
WEB-INF/lib/jdbc2.jar
WEB-INF/classes/com/myco/myapp/Servlet.class
META-INF/MANIFEST.MF
index.html
front.jsp
images/small/logo.gif
images/large/logo.gif
4.3.3ear
用于打包企业应用
例子
<ear destfile="{build.dir}/myapp.ear" appxml="{src.dir}/metadata/application.xml">
<fileset dir="{build.dir}" includes="*.jar,*.war"/>
</ear>
4.4时间戳
在生成环境中使用当前时间和日期，以某种方式标记某个生成任务的输出，以便记录它是何时生成的，这经常是可取的。这可能涉及编辑一个文件，以便插入一个字符串来指定日期和时间，或将这个信息合并到 JAR 或 zip 文件的文件名中。
这种需要是通过简单但是非常有用的 tstamp 任务来解决的。这个任务通常在某次生成过程开始时调用，比如在一个 init 目标中。这个任务不需要属性，许多情况下只需 <tstamp/> 就足够了。
tstamp 不产生任何输出；相反，它根据当前系统时间和日期设置 Ant 属性。下面是 tstamp 设置的一些属性、对每个属性的说明，以及这些属性可被设置到的值的例子：
属性说明例子
DSTAMP 设置为当前日期，默认格式为yyyymmdd 20031217
TSTAMP 设置为当前时间，默认格式为 hhmm 1603
TODAY 设置为当前日期，带完整的月份2003 年 12 月 17 日
例如，在前一小节中，我们按如下方式创建了一个 JAR 文件：
 
<jar destfile="package.jar" basedir="classes"/>
 
在调用 tstamp 任务之后，我们能够根据日期命名该 JAR 文件，如下所示：
 
<jar destfile="package-{DSTAMP}.jar" basedir="classes"/>
 
因此，如果这个任务在 2003 年 12 月 17 日调用，该 JAR 文件将被命名为 package-20031217.jar。
还可以配置 tstamp 任务来设置不同的属性，应用一个当前时间之前或之后的时间偏移，或以不同的方式格式化该字符串。所有这些都是使用一个嵌套的 format 元素来完成的，如下所示：
<tstamp>
<format property="OFFSET_TIME"
pattern="HH:mm:ss"
offset="10" unit="minute"/>
</tstamp>
 
上面的清单将 OFFSET_TIME 属性设置为距离当前时间 10 分钟之后的小时数、分钟数和秒数。
用于定义格式字符串的字符与 java.text.SimpleDateFormat 类所定义的那些格式字符相同
4.5执行SQL语句
通过jdbc执行SQL语句
例子：
1.<sql
driver="org.gjt.mm.mysql.Driver"
url="jdbc:mysql://localhost:3306/mydb"
userid="root"
password="root"
src="data.sql"
/>
2.<sql
driver="org.database.jdbcDriver"
url="jdbc:database-url"
userid="sa"
password="pass"
src="data.sql"
rdbms="oracle"
version="8.1."
>
</sql>
只有在oracle、版本是8.1的时候才执行
4.6发送邮件
使用SMTP服务器发送邮件
例子：
<mail mailhost="smtp.myisp.com" mailport="1025" subject="Test build">
<from address="me@myisp.com"/>
<to address="all@xyz.com"/>
<message>The {buildname} nightly build has completed</message>
<fileset dir="dist">
<includes name="**/*.zip"/>
</fileset>
</mail>
mailhost： SMTP服务器地址
mailport：服务器端口
subject：主题
from：发送人地址
to：接受人地址
message：发送的消息
fileset：设置附件
ant使用指南１
2007-03-27 15:13
－. Ant简介
 

Ant是一款类似make的工具，用来编译/运行/打包Java程序。在构建、包装和发布过程
中几乎每一件事都可以由Ant的任务来处理。
  
二．搭建ANT运行环境
  
1、将ant1.6.1解压缩到任意目录，假设解压缩到C:\apache-ant-1.6.1目录中
2、然后在path路径中添加   C:\apache-ant-1.6.1\bin
3、再classpath中添加   C:\apache-ant-1.6.1\lib
三、ANT的组成（主要由三部分组成：Project、Target、Task）
1、Project(项目)。基本属性：name、default、basedir。一个build.xml只能存在一个Project工程。
name ：项目名称
default ：缺省开始执行的Target
basedir ：用于计算所有其他路径的基路径。
  
例1：<project name="dev" basedir="." default="dist">
  
2、Target。一个项目可以定义一个或多个Target、一个Target是一系列你想要执行的任务，如编译任务、打包任务、混淆任务。
   
Target的基本属性： name：target的名字，depends：该target依赖关系，description： target的描述信息。
  
例2：<target name="clean" depends="init" description="Clean dist and temp directories">
  
Ant在执行时以Target为单位，Target的depends属性又决定了哪个Target先执行，因此我们可以通过Target来构造编译顺序。
  
例3：<target name="copy" >
       <target name="javac" depends="copy">
       <target name="jar" depends="javac">
执行顺序是从下至上，依次执行，如果某个Target没有depends属性，那么就顺序执行。
  
例4：一个完整的Target：
<target name="compile" depends="replacesrc"   description="Compiling Java source files">
     <javac   srcdir="temp/src"  
             destdir="temp/build"
             debug="on"
             deprecation="false"
             optimize="true">
     <classpath refid="classpath"/>
     </javac>
</target>
3、Task。Ant执行的一系列任务是由Target构成的，而Target又是由数个小的Task构成的，task任务是最小的运行单位，我们可以把copy、delete、mkdir等操作认为是一个小任务。
(1)copy任务。
A．拷贝单个文件:
<copy file="Demo/manifest.mf" todir="temp/build/META-INF" /> 
解释：把一个文件拷贝到拷贝相关文件夹中。
B．拷贝文件夹：
<copy todir="temp/build">
     <fileset dir="temp/classes"/>
   </copy> 
     解释：把temp/build目录下的所有文件，拷贝到temp/classes目录中去
C.替换拷贝
<copy todir="temp/build">
   <fileset dir="temp/classes" includes="*.class" />
   <filterset>
        <filter token="@Time@" value="${app.time}"/>
   </filterset>
</copy> 
   解释：   <filterset>过滤集，可以将temp/classes文件夹下的存在@Time@标记的文件，替换为变量${app.time}值。这样在完成拷贝的同时也完成了替换任务。
(2)mkdir任务和delete任务
A．单独的delete和mkdir任务
      <delete dir="temp/src"/> 
      <delete file="temp/build/Thumbs.db" />
      <mkdir dir="temp/src"/>
   
    B. 带有条件的删除任务
       <delete>
         <fileset dir="store" includes="*.*"/>
         <fileset dir="source" excludes="*.java"/>                                  </delete>       
       解释：include表示要删除哪些文件；而excludes表示排除的文件；
（3）replace替换任务
A．替换某一文件中的字符串
<replace file ="base/testing.txt">
token="@temp@" 
value="${newstring}"
</replace>
解释：token是需要替换的标记；value是新值，将testing.txt文件中的@temp@替换为新值。
B．替换某个文件夹中存在特定标记的文件
<replace dir="temp" token="@CHARSET@" value="${webapp.charset}"/>  
解释：temp目录中文件，如果有存在@CHARSET@标记的，将被替换为${webapp.charset}变量值。
C.批量替换
<replace dir="dist" includes="${app.project}.jad" encoding="UTF-8">
<replacefilter token="@NAME@" value="${app.name}"/>
     <replacefilter token="@VENDOR@" value="${app.vendor}"/>
     <replacefilter token="@MIDLET@" value="${app.midlet}"/>
     <replacefilter token="@JAR@" value="${app.project}"/>
     <replacefilter token="@FILESIZE@" value="${size}"/>
     <replacefilter token="@DESCRIPTION@" value="${app.description}"/>             <replacefilter token="@PRICE@" value="${app.price}"/>
</replace>
(4) javac任务 ,编译源程序
<target name="Compile" description="Compile Java source files">
<javac srcdir="src"
 
destdir="temp/classes"
 
bootclasspath="${compile.classpath}"
 
target="1.1"
 
debug="on"
deprecation="on"
includes="*.java"
 
optimize="true"
 
encoding="UTF-8"/>  
 
 
</target>
解释：bootclasspath参数（启动类库）：它已经包含了jre/lib目录下的rt.jar，以及我们自定义的类库。如果使用classpath参数，仅指我们定义的类库；
(5) java任务 。为运行Java应用程序，需要使用java任务
A．运行一个类
<target name="run" description="Run the program">
     <java classname="${main}" classpath="${classpath}"/>
</target>
解释：classname表示要运行的主类。
 
B．运行某一特定类，并加上运行参数。
<java fork="true" classname="proguard.ProGuard" classpath="${proguard.classpath}">
             <arg line="-libraryjars ${proguard.classpath}"/>
             <arg line="-injars temp/${app.project}_tmp.jar"/>
             <arg line="-outjar temp/${app.project}_obf.jar"/>
             <arg line="-defaultpackage ''"/>
             <arg line="-dontusemixedcaseclassnames"/>
             <arg line="-keep public class ${app.midlet}"/>
</java>
 
解释：fork参数：为true时，在新的JVM实例中运行，不影响当前JVM工作
如何减少文件的size?
使用3.3.2版本的proguard.jar,然后在混淆参数中添加两行代码:
<arg line = "-overloadaggressively"/>                   
<arg line="-keepclasseswithmembers public class ${app.midlet} {public void startApp();public void destroyApp(boolean);}"/>
这样可以保证startApp和destroyApp不被打上Final修饰符,同时还能更大的压缩代码,不过要求Midlet类中startApp和destroyApp方法保持上面的形式。
（6）JAR任务
将编译好的CLASS文件打成JAR包，这是JAR任务的工作：
<target name="jar" depends="Compile" description="Build jar file">
<jar jarfile="dist/${name}.jar"
       basedir="${tmp/class}"
manifest="tmp/res/manifest.mf"
manifestencoding="UTF-8">
   <fileset dir="res" includes="*.*"/> <!-- 将res目录中的文件也打进JAR包 -->
</jar>
</target>
         
（7）exec任务，用以调用外部程序
<exec executable="${LIB_PATH}/preverify.exe">
    <arg line="-classpath ${compile.classpath} -d temp/build temp/obfuscate"/>
</exec>
 
四、ANT的参数部分：
  
-quiet（不显示大多数build信息）
-verbose（显示构建过程的每个操作的详细信息）
-buildfile filename.xml 构建特定的xml文件
-Dproperty=value 设定特别的外部参数，外部参数可以传递给内部变量
-find filename.xml 它会让ANT自动查找当前的目录、父目录中的xml文件，直到失败
  
例：
ant -buildfile test.xml
  
使用当前目录下的test.xml运行Ant
  
ant -buildfile test.xml dist
  
使用当前目录下的test.xml运行Ant，执行一个叫做dist的target。
  
ant -buildfile test.xml -Dbuild=build/classes dist
  
使用当前目录下的test.xml运行Ant，执行一个叫做dist的target，并设定build变量的值为build/classes。
  
五、自定义TASK
  
ANT已经内置了不少task，像copy、replace、javac等等，但是有时候还需要一些特定的任务来完成操作，比如在生成JAD文件时，需要一个Midlet-Jar-Size的参数，得到JAR文件的大小，但是通过内部的task无法实现，因此可以自己编写类来实现此功能，但必须保证该类是从Task类继承过来的。
  
例：
<taskdef name="filesize" classname="ant.FileSizeTask" classpath="${LIB_PATH}/FileSizeTask.jar" />
<filesize file="${Base}/Demo_Build/${jarName}" property="size" />
   <replace dir="store" includes="${jadName}" encoding="UTF-8">
      <replacefilter token="@FILESIZE@" value="${size}" />
</replace>
  
解释：taskdef：自定义任务，name：任务名  
编写Ant 自定义任务很简单，Ant 能够使用生成文件中指定的对应属性的值来调用这个方法，这个方法的名称需要是 set 加上属性的名称，因此在下面的例子中，我们需要名为 setFile() 和 setTofile() 的两个方法。
当 Ant 遇到生成文件中的一个属性设置时，它会寻找相关任务中具有适当名称的方法（称为 setter 方法）。
生成文件中的属性是作为字符串来指定的，因此我们的 setter 方法的参数可以是一个字符串。在这样的情况下，Ant 将在展开值所引用的任何属性之后，使用该属性的字符串值来调用我们的方法。
但有时我们想把属性的值看作是一种不同的类型。这里的示例任务就是这种情况，其中的属性值引用文件系统上的文件，而不只是引用任意的字符串。可以通过将方法参数声明为 java.io.File 类型来容易地做到这点。
Ant 将接受属性的字符串值，并把它解释为一个文件，然后传递给我们的方法。Ant 能够对其他类型执行类似的转换，比如 boolean 和 int 类型。但如果提供具有相同名称但是具有不同参数的两个方法，Ant 将使用更明确的那一个方法，因此文件类型将优先于字符串类型。
例：一个排序的task任务
public class FileSorter extends Task {
private File file, tofile;
// ant在进行任务处理时会调用execute()方法
     public void execute() throws BuildException {
         System.out.println("Sorting file="+file);
         try {
             BufferedReader from =
                 new BufferedReader(new FileReader(file));
             BufferedWriter to =
                 new BufferedWriter(new FileWriter(tofile));
             List allLines = new ArrayList();
             // read in the input file
             String line = from.readLine();
             while (line != null) {
                 allLines.add(line);
                 line = from.readLine();
             }
             from.close();
             // sort the list
             Collections.sort(allLines);
             // write out the sorted list
             for (ListIterator i=allLines.listIterator(); i.hasNext(); ) {
                 String s = (String)i.next();
                 to.write(s); to.newLine();
             }
             to.close();
         } catch (FileNotFoundException e) {
             throw new BuildException(e);
         } catch (IOException e) {
             throw new BuildException(e);
         }
     }
     // file参数
     public void setFile(File file) {
         this.file = file;
     }
     // tofile参数
     public void setTofile(File tofile) {
         this.tofile = tofile;
     }
}
 
使用这个自定义任务：
<taskdef name="filesorter"   classname=" FileSorter" classpath="filesorter"/>
    <target name="main">
         <filesorter file="input.txt" tofile="output.txt"/>
    </target>
  
解释：file和tofile分别是程序入口、出口


<gzip src="test.tar" destfile="test.tar.gz"/>
<bzip2 src="test.tar" destfile="test.tar.bz2"/>
<gzip destfile="archive.tar.gz">
  <url url="http://example.org/archive.tar"/>
</gzip>
downloads http://example.org/archive.tar and compresses it to archive.tar.gz in the project's basedir on the fly.

### SSH
Run a command on a remote machine using password authentication

  <sshexec host="somehost"
	username="dude"
	password="yo"
	command="touch somefile"/>
Run a command on a remote machine using key authentication

  <sshexec host="somehost"
	username="dude"
	keyfile="${user.home}/.ssh/id_dsa"
	passphrase="yo its a secret"
	command="touch somefile"/>
Run a command on a remote machine using key authentication with no passphrase

  <sshexec host="somehost"
	username="dude"
	keyfile="${user.home}/.ssh/id_dsa"
	command="touch somefile"/>
Run a set of commands from a command resource (file) on a remote machine using key authentication with no passphrase

  <sshexec host="somehost"
	username="dude"
	keyfile="${user.home}/.ssh/id_dsa"
	commandResource="to_run"/>
Security Note: Hard coding passwords and/or usernames in sshexec task can be a serious security hole. Consider using variable substitution and include the password on the command line. For example:
  <sshexec host="somehost"
	username="${username}"
	password="${password}"
	command="touch somefile"/>
Invoking ant with the following command line:
    ant -Dusername=me -Dpassword=mypassword target1 target2

<exec executable="mycommand">
   <redirector output="myfile.txt" alwayslog="true"/>           
</exec>

### ant exec task中带双引号的参数
1. 可以使用<arg value
2. xml文件中使用&quot;表示引号




### As you pointed out, first the line the the 'a2' will be selected. The tokenfilter then replaces a2 and the colon with nothing. Hope that helps.
<loadfile srcfile="data" property="result">
     <filterchain>
           <linecontains>
                <contains value="a2"/>
           </linecontains>
           <tokenfilter>
                <replacestring from="a2," to=""/>
           </tokenfilter>
    </filterchain>
</loadfile>
<echo message="${result}"/>


### Replacing characters in Ant property
<propertyregex property="propB"
               input="${propA}"
               regexp=" "
               replace="_"
               global="true" />



  <fileset dir="${client.src}" >
  <patternset refid="non.test.sources"/>
</fileset>
Groups all files in directory ${client.src}, using the same patterns as the above example.

<fileset dir="${server.src}" casesensitive="yes">
  <filename name="**/*.java"/>
  <filename name="**/*Test*" negate="true"/>
</fileset>
Groups the same files as the top example, but using the <filename> selector.

<fileset dir="${server.src}" casesensitive="yes">
  <filename name="**/*.java"/>
  <not>
    <filename name="**/*Test*"/>
  </not>
</fileset>

    <globmapper from="*" to="*.bak"/>


    <scp todir="user:password@somehost:/home/chuck/">
    <fileset dir="src_dir"/>
  </scp>